package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/Trinitt/learn-graphql/graph/model"
	"github.com/google/uuid"
)

// CreateReel is the resolver for the createReel field.
func (r *mutationResolver) CreateReel(ctx context.Context, inputReel model.NewReel) (*model.Reel, error) {
	reel := &model.Reel{
		ID:       uuid.NewString(),
		UserID:   inputReel.UserID,
		Text:     inputReel.Text,
		MediaURL: inputReel.MediaURL,
	}
	return reel, r.DB.Save(&reel).Error
}

// DeleteReel is the resolver for the deleteReel field.
func (r *mutationResolver) DeleteReel(ctx context.Context, reelID string) (*model.Reel, error) {
	reel := &model.Reel{}
	err := r.DB.First(&reel, "id = ?", reelID).Error

	if err != nil {
		return nil, err
	}

	err = r.DB.Delete(&reel).Error
	if err != nil {
		return nil, err
	}

	return reel, nil
}

// GetAllReels is the resolver for the getAllReels field.
func (r *queryResolver) GetAllReels(ctx context.Context, limit int, offset int) ([]*model.FetchReel, error) {
	var reels []*model.Reel

	if err := r.DB.Limit(limit).Offset(offset).Find(&reels).Error; err != nil {
		return nil, err
	}

	var fetchReels []*model.FetchReel

	for _, reel := range reels {
		fetchReel := &model.FetchReel{
			ID:       reel.ID,
			User:     nil,
			Text:     reel.Text,
			MediaURL: reel.MediaURL,
		}

		var user *model.User

		if err := r.DB.Model(&model.User{}).Where("id= ?", reel.UserID).Find(&user).Error; err != nil {
			return nil, err
		}
		fetchReel.User = user
		fetchReels = append(fetchReels, fetchReel)
	}
	return fetchReels, nil
}

// GetReelsURLByUserID is the resolver for the getReelsURLByUserID field.
func (r *queryResolver) GetReelsURLByUserID(ctx context.Context, userID string) ([]*string, error) {
	var reelsURLs []*string

	err := r.DB.Raw(`
		SELECT media_url
		FROM reels 
		WHERE user_id = ?
	`, userID).Scan(&reelsURLs).Error
	if err != nil {
		return nil, err
	}

	return reelsURLs, nil
}
