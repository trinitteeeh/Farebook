package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/Trinitt/learn-graphql/graph/model"
	"github.com/google/uuid"
)

// CreateChatDetail is the resolver for the createChatDetail field.
func (r *mutationResolver) CreateChatDetail(ctx context.Context, senderID string, receiverID string, text string, headerID string, mediaURL string) (*model.ChatDetail, error) {
	chatDetail := &model.ChatDetail{
		ID:         uuid.NewString(),
		HeaderID:   headerID,
		SenderID:   senderID,
		ReceiverID: receiverID,
		Text:       text,
		CreatedAt:  time.Now().Format("2006-01-02 15:04:05"),
		MediaURL:   mediaURL,
	}

	if err := r.DB.Save(&chatDetail).Error; err != nil {
		return nil, err
	}

	for _, conn := range r.Conns {
		fmt.Println(conn)
		fmt.Println("TESTING")
		err := conn.WriteJSON(&chatDetail)
		if err != nil {
			fmt.Println(err)
		}
	}

	return chatDetail, nil
}

// DeleteChatDetail is the resolver for the deleteChatDetail field.
func (r *mutationResolver) DeleteChatDetail(ctx context.Context, id string) (*model.ChatDetail, error) {
	panic(fmt.Errorf("not implemented: DeleteChatDetail - deleteChatDetail"))
}

// GetAllChat is the resolver for the getAllChat field.
func (r *queryResolver) GetAllChat(ctx context.Context, headerID string) ([]*model.FetchChatDetail, error) {
	var chatDetails []*model.ChatDetail

	// Fetch chat headers where UserID1 or UserID2 matches userID
	if err := r.DB.Where("header_id = ? ", *&headerID).Find(&chatDetails).Error; err != nil {
		return nil, err
	}

	var fetchChatDetails []*model.FetchChatDetail

	// Fetch user information for each FetchChatDetail
	for _, chatDetail := range chatDetails {
		fetchChatDetail := &model.FetchChatDetail{
			ID:        chatDetail.ID,
			Text:      chatDetail.Text,
			Sender:    nil,
			Receiver:  nil,
			CreatedAt: chatDetail.CreatedAt,
			MediaURL:  chatDetail.MediaURL,
		}

		var sender model.User
		if err := r.DB.First(&sender, "id = ?", chatDetail.SenderID).Error; err != nil {
			return nil, err
		}
		fetchChatDetail.Sender = &sender

		var receiver model.User
		if err := r.DB.First(&receiver, "id = ?", chatDetail.ReceiverID).Error; err != nil {
			return nil, err
		}
		fetchChatDetail.Receiver = &receiver

		fetchChatDetails = append(fetchChatDetails, fetchChatDetail)
	}

	return fetchChatDetails, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
