package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/Trinitt/learn-graphql/graph/model"
	"github.com/google/uuid"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, inputPost *model.NewPost) (*model.Post, error) {
	post := &model.Post{
		ID:          uuid.NewString(),
		PostText:    inputPost.PostText,
		UserID:      inputPost.UserID,
		Privacy:     inputPost.Privacy,
		PublishDate: inputPost.PublishDate,
	}
	return post, r.DB.Save(&post).Error
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*model.Post, error) {
	post := &model.Post{}
	err := r.DB.First(&post, "id = ?", id).Error

	if err != nil {
		return nil, err
	}

	err = r.DB.Delete(&post).Error
	if err != nil {
		return nil, err
	}

	return post, nil
}

// GetAllPost is the resolver for the getAllPost field.
func (r *queryResolver) GetAllPost(ctx context.Context, currentUserID string, limit int, offset int) ([]*model.FetchPost, error) {
	var posts []*model.Post

	if err := r.DB.Limit(limit).Offset(offset).Find(&posts).Error; err != nil {
		return nil, err
	}

	var fetchPosts []*model.FetchPost

	// Iterate through each Post and create a corresponding FetchPost
	for _, post := range posts {
		fetchPost := &model.FetchPost{
			ID:          post.ID,
			PostText:    post.PostText,
			PublishDate: post.PublishDate,
			Privacy:     post.Privacy,
			User:        nil,
			LikesCount:  0,
			MediaLink:   nil,
			IsLiked:     false,
		}
		// Retrieve User Data
		var user model.User
		if err := r.DB.Where("id = ?", post.UserID).First(&user).Error; err != nil {
			return nil, err
		}
		fetchPost.User = &user

		//Retrieve Media Data
		var mediaLink []string
		var mediaList []*model.PostPicture
		if err := r.DB.Where("post_id = ?", post.ID).Find(&mediaList).Error; err != nil {
			return nil, err
		}
		for _, media := range mediaList {
			mediaLink = append(mediaLink, media.PictureURL)
		}
		fetchPost.MediaLink = mediaLink

		// Count likes for the current post
		var likeCount int64
		if err := r.DB.Model(&model.PostLike{}).Where("post_id = ?", post.ID).Count(&likeCount).Error; err != nil {
			return nil, err
		}
		fetchPost.LikesCount = int(likeCount)

		//retrieve is liked
		var isLikedCount int64
		if err := r.DB.Model(&model.PostLike{}).
			Where("post_id = ? AND user_id = ?", post.ID, currentUserID).
			Count(&isLikedCount).Error; err != nil {
			return nil, err
		}
		fetchPost.IsLiked = isLikedCount > 0

		fetchPosts = append(fetchPosts, fetchPost)
	}

	return fetchPosts, nil
}

// GetPostByUserID is the resolver for the getPostByUserId field.
func (r *queryResolver) GetPostByUserID(ctx context.Context, userID string) ([]*model.FetchPost, error) {
	//retrieve post
	var posts []*model.Post
	if err := r.DB.Where("user_id = ?", userID).Find(&posts).Error; err != nil {
		return nil, err
	}

	// Retrieve User Data
	var user *model.User
	if err := r.DB.Where("id = ?", userID).First(&user).Error; err != nil {
		return nil, err
	}

	var fetchPosts []*model.FetchPost

	// Iterate through each Post and create a corresponding FetchPost
	for _, post := range posts {
		fetchPost := &model.FetchPost{
			ID:          post.ID,
			PostText:    post.PostText,
			PublishDate: post.PublishDate,
			Privacy:     post.Privacy,
			User:        user,
			LikesCount:  0,
			MediaLink:   nil,
			IsLiked:     false,
		}
		//Retrieve Media Data
		var mediaLink []string
		var mediaList []*model.PostPicture
		if err := r.DB.Where("post_id = ?", post.ID).Find(&mediaList).Error; err != nil {
			return nil, err
		}
		for _, media := range mediaList {
			mediaLink = append(mediaLink, media.PictureURL)
		}
		fetchPost.MediaLink = mediaLink

		// Count likes for the current post
		var likeCount int64
		if err := r.DB.Model(&model.PostLike{}).Where("post_id = ?", post.ID).Count(&likeCount).Error; err != nil {
			return nil, err
		}
		fetchPost.LikesCount = int(likeCount)

		//retrieve is liked
		var isLikedCount int64
		if err := r.DB.Model(&model.PostLike{}).
			Where("post_id = ? AND user_id = ?", post.ID, userID).
			Count(&isLikedCount).Error; err != nil {
			return nil, err
		}
		fetchPost.IsLiked = isLikedCount > 0

		fetchPosts = append(fetchPosts, fetchPost)
	}

	return fetchPosts, nil
}

// GetGroupPostByUserID is the resolver for the getGroupPostByUserId field.
func (r *queryResolver) GetGroupPostByUserID(ctx context.Context, userID string) ([]*model.FetchPost, error) {
	panic(fmt.Errorf("not implemented: GetGroupPostByUserID - getGroupPostByUserId"))
}
