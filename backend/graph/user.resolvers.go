package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"
	"fmt"

	"github.com/Trinitt/learn-graphql/graph/model"
	service "github.com/Trinitt/learn-graphql/services"
	"github.com/google/uuid"
	"gorm.io/gorm"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, inputUser model.NewUser) (*model.User, error) {
	existingUser := &model.User{}
	err := r.DB.First(existingUser, "email = ?", inputUser.Email).Error
	if err == nil {
		return nil, errors.New("email has been used")
	} else if !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}

	password, err := model.HashPassword(inputUser.Password)
	if err != nil {
		return nil, err
	}

	newUser := &model.User{
		ID:         uuid.NewString(),
		FirstName:  inputUser.FirstName,
		Surename:   inputUser.Surename,
		Email:      inputUser.Email,
		Gender:     inputUser.Gender,
		Password:   password,
		Dob:        inputUser.Dob,
		ProfileURL: "",
		IsAuth:     inputUser.IsAuth,
	}

	if err := r.DB.Save(newUser).Error; err != nil {
		return nil, err
	}

	return newUser, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, inputUser model.NewUser) (*model.User, error) {
	// Find the user by ID in the database
	user := &model.User{}
	err := r.DB.First(&user, "id = ?", id).Error
	if err != nil {
		return nil, err
	}

	if inputUser.FirstName != "" {
		user.FirstName = inputUser.FirstName
	}
	if inputUser.Surename != "" {
		user.Surename = inputUser.Surename
	}
	if inputUser.Email != "" {
		user.Email = inputUser.Email
	}
	if inputUser.Gender != "" {
		user.Gender = inputUser.Gender
	}
	if inputUser.Password != "" {
		user.Password = inputUser.Password
	}
	if inputUser.ProfileURL != "" {
		user.ProfileURL = inputUser.ProfileURL
	}

	err = r.DB.Save(&user).Error
	return user, err
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	// Find the user by ID in the database
	user := &model.User{}
	err := r.DB.First(&user, "id = ?", id).Error
	if err != nil {
		return nil, err
	}

	// Delete the user from the database
	err = r.DB.Delete(&user).Error
	if err != nil {
		return nil, err
	}

	return user, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (string, error) {
	return service.UserLogin(ctx, email, password)
}

// ActivateAccount is the resolver for the activateAccount field.
func (r *mutationResolver) ActivateAccount(ctx context.Context, id string) (bool, error) {
	user := &model.User{}
	err := r.DB.First(&user, "id = ?", id).Error
	if err != nil {
		return false, err
	}

	if !user.IsAuth {
		user.IsAuth = true

		err = r.DB.Save(&user).Error
		return true, err
	}

	return false, err
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, id string, newPassword string) (bool, error) {
	user := &model.User{}
	err := r.DB.First(&user, "id = ?", id).Error
	if err != nil {
		return false, err
	}

	if model.CheckPasswordHash(user.Password, newPassword) {
		return false, errors.New("old password and new password are the same")
	}

	newHashedPassowrd, err := model.HashPassword(newPassword)
	if err != nil {
		return false, err
	}

	user.Password = newHashedPassowrd
	err = r.DB.Save(&user).Error

	return true, err
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	user := &model.User{}
	err := r.DB.First(&user, "id = ?", id).Error
	if err != nil {
		return nil, err
	}

	return user, nil
}

// GetAllUser is the resolver for the getAllUser field.
func (r *queryResolver) GetAllUser(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	return users, r.DB.Find(&users).Error
}

// GetUserByToken is the resolver for the getUserByToken field.
func (r *queryResolver) GetUserByToken(ctx context.Context, token string) (*model.User, error) {
	// Validate the JWT token
	parsedToken, err := service.JwtValidate(ctx, token)
	if err != nil {
		return nil, err
	}

	// Access the claims from the token
	if claims, ok := parsedToken.Claims.(*service.JwtCustom); ok && parsedToken.Valid {
		// Here, you can extract the user ID from the claims
		userID := claims.ID
		fmt.Println(userID)
		// Fetch the user from your data source using the user ID
		// For example:
		user, err := r.Query().GetUser(ctx, userID)
		if err != nil {
			return nil, err
		}

		return user, nil
	}

	return nil, fmt.Errorf("invalid JWT token")
}

// GetUserByID is the resolver for the getUserByID field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	user, err := r.Query().GetUser(ctx, id)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// GetUserByEmail is the resolver for the getUserByEmail field.
func (r *queryResolver) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	user := &model.User{}
	err := r.DB.First(&user, "email = ?", email).Error
	if err != nil {
		return nil, err
	}

	return user, nil
}
