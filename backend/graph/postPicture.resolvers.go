package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/Trinitt/learn-graphql/graph/model"
)

// CreatePostPicture is the resolver for the createPostPicture field.
func (r *mutationResolver) CreatePostPicture(ctx context.Context, postID string, pictureURL string) (*model.PostPicture, error) {
	postPicture := &model.PostPicture{
		PostID:     postID,
		PictureURL: pictureURL,
	}
	return postPicture, r.DB.Create(&postPicture).Error
}

// DeletePostPicture is the resolver for the deletePostPicture field.
func (r *mutationResolver) DeletePostPicture(ctx context.Context, postID string) (*model.PostPicture, error) {
	postPicture := &model.PostPicture{}
	err := r.DB.First(&postPicture, "postId = ?", postID).Error

	if err != nil {
		return nil, err
	}

	err = r.DB.Delete(&postPicture).Error
	if err != nil {
		return nil, err
	}

	return postPicture, nil
}

// GetPictureURL is the resolver for the getPictureURL field.
func (r *queryResolver) GetPictureURL(ctx context.Context, postID string) (*string, error) {
	var pictureURL string

	err := r.DB.Model(&model.PostPicture{}).Where("postId= ?", postID).Pluck("pictureURL", &pictureURL).Error
	if err != nil {
		return nil, err
	}

	return &pictureURL, nil
}

// GetPictureByUserID is the resolver for the getPictureByUserID field.
func (r *queryResolver) GetPictureByUserID(ctx context.Context, userID string) ([]*string, error) {
	var pictureURLs []*string

	err := r.DB.Raw(`
		SELECT picture_url
		FROM post_pictures pp
		INNER JOIN posts p ON pp.post_id = p.id
		WHERE p.user_id = ?
	`, userID).Scan(&pictureURLs).Error
	if err != nil {
		return nil, err
	}

	return pictureURLs, nil
}
