package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"time"

	"github.com/Trinitt/learn-graphql/graph/model"
	"github.com/google/uuid"
)

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, userID string, profileID string, createdAt string, text string) (*model.Notification, error) {
	notification := &model.Notification{
		ID:        uuid.NewString(),
		UserID:    userID,
		ProfileID: profileID,
		CreatedAt: time.Now().Format("2006-01-02 15:04:05"),
		Text:      text,
	}
	return notification, r.DB.Save(&notification).Error
}

// GetAllNotification is the resolver for the getAllNotification field.
func (r *queryResolver) GetAllNotification(ctx context.Context, userID string) ([]*model.FetchNotification, error) {
	notifications := []*model.Notification{}
	err := r.DB.Where("user_id = ?", userID).Find(&notifications).Error
	if err != nil {
		return nil, err
	}

	var fetchNotifications []*model.FetchNotification

	for _, notification := range notifications {
		fetchNotification := &model.FetchNotification{
			ID:        notification.ID,
			CreatedAt: notification.CreatedAt,
			Text:      notification.Text,
		}

		var user model.User
		if err := r.DB.Where("id = ?", notification.UserID).First(&user).Error; err != nil {
			return nil, err
		}
		fetchNotification.User = &user

		var profile model.User
		if err := r.DB.Where("id = ?", notification.ProfileID).First(&profile).Error; err != nil {
			return nil, err
		}
		fetchNotification.Profile = &profile

		fetchNotifications = append(fetchNotifications, fetchNotification)
	}

	return fetchNotifications, nil
}
