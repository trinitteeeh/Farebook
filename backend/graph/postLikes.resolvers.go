package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/Trinitt/learn-graphql/graph/model"
)

// CreatePostLike is the resolver for the createPostLike field.
func (r *mutationResolver) CreatePostLike(ctx context.Context, postID string, userID string) (*model.PostLike, error) {
	postLike := &model.PostLike{
		PostID: postID,
		UserID: userID,
	}
	return postLike, r.DB.Create(&postLike).Error
}

// DeletePostLike is the resolver for the deletePostLike field.
func (r *mutationResolver) DeletePostLike(ctx context.Context, postID string, userID string) (string, error) {
	err := r.DB.Where("post_id = ? AND user_id = ?", postID, userID).Delete(&model.PostLike{}).Error
	if err != nil {
		return "", err
	}

	return postID, nil
}

// GetPostLike is the resolver for the getPostLike field.
func (r *queryResolver) GetPostLike(ctx context.Context, postID string) ([]*model.User, error) {
	var postLikes []*model.PostLike

	if err := r.DB.Where("post_id = ?", postID).Find(&postLikes).Error; err != nil {
		return nil, err
	}

	var userIDs []string
	for _, postLike := range postLikes {
		userIDs = append(userIDs, postLike.UserID)
	}

	var users []*model.User
	if err := r.DB.Where("id IN ?", userIDs).Find(&users).Error; err != nil {
		return nil, err
	}

	return users, nil
}

// GetLikesCount is the resolver for the getLikesCount field.
func (r *queryResolver) GetLikesCount(ctx context.Context, postID string) (int, error) {
	var likesCount int64
	if err := r.DB.Model(&model.PostLike{}).Where("post_id = ?", postID).Count(&likesCount).Error; err != nil {
		return 0, err
	}

	return int(likesCount), nil
}
